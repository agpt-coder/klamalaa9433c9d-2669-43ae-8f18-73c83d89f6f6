// datasource db defines the database connection settings.
// It is configured for PostgreSQL and uses an environment variable for the connection URL.
// The 'extensions' feature enables the use of PostgreSQL-specific data types.
datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
}

// generator db configures Prisma Client settings.
// It is set up to use Prisma Client Python with asyncio interface and specific features.
generator db {
  provider             = "prisma-client-py"
  interface            = "asyncio"
  recursive_type_depth = 5
  previewFeatures      = ["postgresqlExtensions"]
}

model User {
  id             String   @id @default(dbgenerated("gen_random_uuid()"))
  email          String   @unique
  hashedPassword String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  role           Role     @default(ENDUSER)

  Prompts  UserSubmittedPrompt[]
  APIKey   APIKey[]
  AuditLog AuditLog[]
}

model UserSubmittedPrompt {
  id                 String       @id @default(dbgenerated("gen_random_uuid()"))
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  original           String
  refined            String?
  userId             String
  status             PromptStatus @default(PENDING)
  refinementAttempts Int          @default(0)

  User     User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  ErrorLog ErrorLog[]
}

model APIKey {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  key       String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  valid     Boolean  @default(true)
  userId    String

  User User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AuditLog {
  id          String   @id @default(dbgenerated("gen_random_uuid()"))
  createdAt   DateTime @default(now())
  userId      String?
  action      String
  description String?

  User User? @relation(fields: [userId], references: [id], onDelete: SetNull)
}

model ErrorLog {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  error     String
  promptId  String?

  UserSubmittedPrompt UserSubmittedPrompt? @relation(fields: [promptId], references: [id], onDelete: SetNull)
}

enum Role {
  ADMIN
  ENDUSER
  PREMIUMUSER
}

enum PromptStatus {
  PENDING
  COMPLETED
  FAILED
}

